{"/home/travis/build/npmtest/node-npmtest-sync/test.js":"/* istanbul instrument in package npmtest_sync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sync/lib.npmtest_sync.js":"/* istanbul instrument in package npmtest_sync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sync = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sync = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sync/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sync && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sync\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sync.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sync.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sync.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sync.__dirname + '/lib.npmtest_sync.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sync/node_modules/sync/lib/sync.js":"/*\n  Copyright 2011 Yuriy Bogdanov <chinsay@gmail.com>\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to\n  deal in the Software without restriction, including without limitation the\n  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n  sell copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n  IN THE SOFTWARE.\n*/\n\n// use node-fibers module\nvar Fiber = require('fibers');\n\n/**\n * sync() method simply turns any asynchronous function to synchronous one\n * It receives context object as first param (like Function.prototype.call)\n *\n */\nFunction.prototype.sync = function(obj /* arguments */) {\n    \n    var fiber = Fiber.current,\n        err, result,\n        yielded = false;\n\n    // Create virtual callback\n    var syncCallback = function (callbackError, callbackResult, otherArgs) {\n        // forbid to call twice\n        if (syncCallback.called) return;\n        syncCallback.called = true;\n        \n        if (callbackError) {\n            err = callbackError;\n        }\n        else if (otherArgs) {\n            // Support multiple callback result values\n            result = [];\n            for (var i = 1, l = arguments.length; i < l; i++) {\n                result.push(arguments[i]);\n            }\n        }\n        else {\n            result = callbackResult;\n        }\n        \n        // Resume fiber if yielding\n        if (yielded) fiber.run();\n    }\n    \n    // Prepare args (remove first arg and add callback to the end)\n    // The cycle is used because of slow v8 arguments materialization\n    for (var i = 1, args = [], l = arguments.length; i < l; i++) {\n        args.push(arguments[i]);\n    }\n    args.push(syncCallback);\n    \n    // call async function\n    this.apply(obj, args);\n    \n    // wait for result\n    if (!syncCallback.called) {\n        yielded = true;\n        Fiber.yield();\n    }\n    \n    // Throw if err\n    if (err) throw err;\n    \n    return result;\n}\n\n/**\n * Sync module itself\n */\nvar Sync = function Sync(fn, callback)\n{\n    if (fn instanceof Function) {\n        return Sync.Fiber(fn, callback);\n    }\n    \n    // TODO: we can also wrap any object with Sync, in future..\n}\n\nSync.stat = {\n    totalFibers : 0,\n    activeFibers : 0,\n    totalFutures : 0,\n    activeFutures : 0\n}\n\n/**\n * This function should be used when you need to turn some peace of code fiberized\n * It just wraps your code with Fiber() logic in addition with exceptions handling\n */\nSync.Fiber = function SyncFiber(fn, callback)\n{\n    var parent = Fiber.current;\n    Sync.stat.totalFibers++;\n    \n    var traceError = new Error();\n    if (parent) {\n        traceError.__previous = parent.traceError;\n    }\n    \n    var fiber = Fiber(function(){\n        \n        Sync.stat.activeFibers++;\n        \n        var fiber = Fiber.current,\n            result,\n            error;\n        \n        // Set id to fiber\n        fiber.id = Sync.stat.totalFibers;\n        \n        // Save the callback to fiber\n        fiber.callback = callback;\n        \n        // Register trace error to the fiber\n        fiber.traceError = traceError;\n        \n        // Initialize scope\n        fiber.scope = {};\n        \n        // Assign parent fiber\n        fiber.parent = parent;\n        \n        // Fiber string representation\n        fiber.toString = function() {\n            return 'Fiber#' + fiber.id;\n        }\n        \n        // Fiber path representation\n        fiber.getPath = function() {\n            return (fiber.parent ? fiber.parent.getPath() + ' > ' : '' )\n                + fiber.toString();\n        }\n        \n        // Inherit scope from parent fiber\n        if (parent) {\n            fiber.scope.__proto__ = parent.scope;\n        }\n        \n        // Add futures support to a fiber\n        fiber.futures = [];\n        \n        fiber.waitFutures = function() {\n            var results = [];\n            while (fiber.futures.length)\n                results.push(fiber.futures.shift().result);\n            return results;\n        }\n        \n        fiber.removeFuture = function(ticket) {\n            var index = fiber.futures.indexOf(ticket);\n            if (~index)\n                fiber.futures.splice(index, 1);\n        }\n        \n        fiber.addFuture = function(ticket) {\n            fiber.futures.push(ticket);\n        }\n        \n        // Run body    \n        try {\n            // call fn and wait for result\n            result = fn(Fiber.current);\n            // if there are some futures, wait for results\n            fiber.waitFutures();\n        }\n        catch (e) {\n            error = e;\n        }\n        \n        Sync.stat.activeFibers--;\n        \n        // return result to the callback\n        if (callback instanceof Function) {\n            callback(error, result);\n        }\n        else if (error && parent && parent.callback) {\n            parent.callback(error);\n        }\n        else if (error) {\n            // TODO: what to do with such errors?\n            // throw error;\n        }\n        \n    });\n    \n    fiber.run();\n}\n\n/**\n * Future object itself\n */\nfunction SyncFuture(timeout)\n{\n    var self = this;\n    \n    this.resolved = false;\n    this.fiber = Fiber.current;\n    this.yielding = false;\n    this.timeout = timeout;\n    this.time = null;\n    \n    this._timeoutId = null;\n    this._result = undefined;\n    this._error = null;\n    this._start = +new Date;\n    \n    Sync.stat.totalFutures++;\n    Sync.stat.activeFutures++;\n    \n    // Create timeout error to capture stack trace correctly\n    self.timeoutError = new Error();\n    Error.captureStackTrace(self.timeoutError, arguments.callee);\n    \n    this.ticket = function Future()\n    {\n        // clear timeout if present\n        if (self._timeoutId) clearTimeout(self._timeoutId);\n        // measure time\n        self.time = new Date - self._start;\n        \n        // forbid to call twice\n        if (self.resolved) return;\n        self.resolved = true;\n\n        // err returned as first argument\n        var err = arguments[0];\n        if (err) {\n            self._error = err;\n        }\n        else {\n            self._result = arguments[1];\n        }\n        \n        // remove self from current fiber\n        self.fiber.removeFuture(self.ticket);\n        Sync.stat.activeFutures--;\n        \n        if (self.yielding && Fiber.current !== self.fiber) {\n            self.yielding = false;\n            self.fiber.run();\n        }\n        else if (self._error) {\n            throw self._error;\n        }\n    }\n    \n    this.ticket.__proto__ = this;\n    \n    this.ticket.yield = function() {\n        while (!self.resolved) {\n            self.yielding = true;\n            if (self.timeout) {\n                self._timeoutId = setTimeout(function(){\n                    self.timeoutError.message = 'Future function timed out at ' + self.timeout + ' ms';\n                    self.ticket(self.timeoutError);\n                }, self.timeout)\n            }\n            Fiber.yield();\n        }\n        if (self._error) throw self._error;\n        return self._result;\n    }\n    \n    this.ticket.__defineGetter__('result', function(){\n        return this.yield();\n    });\n    \n    this.ticket.__defineGetter__('error', function(){\n        if (self._error) {\n            return self._error;\n        }\n        try {\n            this.result;\n        }\n        catch (e) {\n            return e;\n        }\n        return null;\n    });\n    \n    this.ticket.__defineGetter__('timeout', function(){\n        return self.timeout;\n    });\n    \n    this.ticket.__defineSetter__('timeout', function(value){\n        self.timeout = value;\n    });\n    \n    // append self to current fiber\n    this.fiber.addFuture(this.ticket);\n    \n    return this.ticket;\n}\n\nSyncFuture.prototype.__proto__ = Function;\nSync.Future = SyncFuture;\n\n/**\n * Calls the function asynchronously and yields only when 'value' or 'error' getters called\n * Returs Future function/object (promise)\n *\n */\nFunction.prototype.future = function(obj /* arguments */) {\n    \n    var fn = this,\n        future = new SyncFuture();\n\n    // Prepare args (remove first arg and add callback to the end)\n    // The cycle is used because of slow v8 arguments materialization\n    for (var i = 1, args = [], l = arguments.length; i < l; i++) {\n        args.push(arguments[i]);\n    }\n    // virtual future callback, push it as last argument\n    args.push(future);\n    \n    // call async function\n    fn.apply(obj, args);\n    \n    return future;\n}\n\n/**\n * Use this method to make asynchronous function from synchronous one\n * This is a opposite function from .sync()\n */\nFunction.prototype.async = function(context)\n{\n    var fn = this, fiber = Fiber.current;\n    \n    function asyncFunction() {\n        \n        // Prepare args (remove first arg and add callback to the end)\n        // The cycle is used because of slow v8 arguments materialization\n        for (var i = 0, args = [], l = arguments.length; i < l; i++) {\n            args.push(arguments[i]);\n        }\n\n        var obj = context || this,\n            cb = args.pop(),\n            async = true;\n        \n        if (typeof(cb) !== 'function') {\n            args.push(cb);\n            if (Fiber.current) async = false;\n        }\n        \n        Fiber.current = Fiber.current || fiber;\n        \n        // Call asynchronously\n        if (async) {\n            Sync(function(){\n                return fn.apply(obj, args);\n            }, cb);\n        }\n        // Call synchronously in same fiber\n        else {\n            return fn.apply(obj, args);\n        }\n    }\n    \n    // Do nothing on async again\n    asyncFunction.async = function() {\n        return asyncFunction;\n    }\n    // Override sync call\n    asyncFunction.sync = function(obj) {\n        for (var i = 1, args = [], l = arguments.length; i < l; i++) {\n            args.push(arguments[i]);\n        }\n        return fn.apply(obj || context || this, args);\n    }\n    // Override toString behavior\n    asyncFunction.toString = function() {\n\t\treturn fn + '.async()';\n\t}\n    \n    return asyncFunction;\n}\n\n/**\n * Used for writing synchronous middleware-style functions\n * \n * throw \"something\" --> next('something')\n * return --> next()\n * return null --> next()\n * return undefined --> next()\n * return true --> void\n */\nFunction.prototype.asyncMiddleware = function(obj){\n    var fn = this.async(obj);\n    // normal (req, res) middleware\n    if (this.length === 2) {\n        return function(req, res, next) {\n            return fn.call(this, req, res, function(err, result){\n                if (err) return next(err);\n                if (result !== true) next();\n            });\n        }\n    }\n    // error handling (err, req, res) middleware\n    else if (this.length === 3) {\n        return function(err, req, res, next) {\n            return fn.call(this, err, req, res, function(err, result){\n                if (err) return next(err);\n                if (result !== true) next();\n            });\n        }\n    }\n}\n\n/**\n * Sleeps current fiber on given value of millis\n */\nSync.sleep = function(ms)\n{\n    var fiber = Fiber.current;\n    if (!fiber) {\n        throw new Error('Sync.sleep() can be called only inside of fiber');\n    }\n    \n    setTimeout(function(){\n        fiber.run();\n    }, ms);\n    \n    Fiber.yield();\n}\n\n/**\n * Logs sync result\n */\nSync.log = function(err, result)\n{\n    if (err) return console.error(err.stack || err);\n    if (arguments.length == 2) {\n        if (result === undefined) return;\n        return console.log(result);\n    }\n    console.log(Array.prototyle.slice.call(arguments, 1));\n}\n\n/**\n * Synchronous repl implementation: each line = new fiber\n */\nSync.repl = function() {\n    \n    var repl = require('repl');\n    \n    // Start original repl\n    var r = repl.start.apply(repl, arguments);\n    \n    // Wrap line watchers with Fiber\n    var newLinsteners = []\n    r.rli.listeners('line').map(function(f){\n        newLinsteners.push(function(a){\n            Sync(function(){\n                require.cache[__filename] = module;\n                f(a);\n            }, Sync.log)\n        })\n    })\n    r.rli.removeAllListeners('line');\n    while (newLinsteners.length) {\n        r.rli.on('line', newLinsteners.shift());\n    }\n    \n    // Assign Sync to repl context\n    r.context.Sync = Sync;\n    \n    return r;\n};\n\n// TODO: document\nSync.__defineGetter__('scope', function() {\n    return Fiber.current && Fiber.current.scope;\n})\n\n// TODO: document\nSync.waitFutures = function() {\n    if (Fiber.current) {\n        Fiber.current.waitFutures();\n    }\n}\n\n// Expose Fibers\nSync.Fibers = Fiber;\n\nmodule.exports = exports = Sync;\n"}